// <auto-generated />
using System;
using DiscordBot;
using InformationProcessSupport.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscordBot.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DiscordBot.Domains.Channels.ChannelEntity", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("ChannelId"), 1L, 1);

                    b.Property<decimal>("AlternateKey")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CategoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChannelId");

                    b.HasAlternateKey("AlternateKey");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("DiscordBot.Domains.Statistics.StatisticEntity", b =>
                {
                    b.Property<int>("StatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatisticId"), 1L, 1);

                    b.Property<string>("Attendance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CameraOperationTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("ConnectionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MicrophoneOperatingTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("StatisticId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("DiscordBot.Domains.Users.UserEntity", b =>
                {
                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("UserId"), 1L, 1);

                    b.Property<decimal>("AlternateKey")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("GuildName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasAlternateKey("AlternateKey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiscordBot.Domains.Statistics.StatisticEntity", b =>
                {
                    b.HasOne("DiscordBot.Domains.Channels.ChannelEntity", "ChannelEntity")
                        .WithMany("StatisticEntities")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordBot.Domains.Users.UserEntity", "UserEntity")
                        .WithMany("StatisticsEntity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DiscordBot.Domains.Channels.ChannelEntity", b =>
                {
                    b.Navigation("StatisticEntities");
                });

            modelBuilder.Entity("DiscordBot.Domains.Users.UserEntity", b =>
                {
                    b.Navigation("StatisticsEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
